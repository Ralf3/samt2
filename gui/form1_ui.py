# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form1.ui'
#
# Created by: PyQt4 UI code generator 4.11.4
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(866, 664)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(854, 646))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(_fromUtf8("pixmaps/samt2_icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolTip(_fromUtf8(""))
        MainWindow.setStatusTip(_fromUtf8(""))
        MainWindow.setWhatsThis(_fromUtf8(""))
        MainWindow.setAutoFillBackground(True)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setMinimumSize(QtCore.QSize(870, 575))
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.horizontalLayout = QtGui.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setMargin(1)
        self.horizontalLayout.setSpacing(1)
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.treeWidget = QtGui.QTreeWidget(self.centralwidget)
        self.treeWidget.setMinimumSize(QtCore.QSize(200, 551))
        self.treeWidget.setMaximumSize(QtCore.QSize(200, 16777215))
        self.treeWidget.setMouseTracking(False)
        self.treeWidget.setStatusTip(_fromUtf8(""))
        self.treeWidget.setObjectName(_fromUtf8("treeWidget"))
        self.horizontalLayout.addWidget(self.treeWidget)
        self.mpl_widget = matplotlibWidget(self.centralwidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mpl_widget.sizePolicy().hasHeightForWidth())
        self.mpl_widget.setSizePolicy(sizePolicy)
        self.mpl_widget.setMinimumSize(QtCore.QSize(100, 100))
        self.mpl_widget.setBaseSize(QtCore.QSize(0, 0))
        self.mpl_widget.setAutoFillBackground(False)
        self.mpl_widget.setStyleSheet(_fromUtf8("background-color: rgb(255, 255, 255);"))
        self.mpl_widget.setObjectName(_fromUtf8("mpl_widget"))
        self.horizontalLayout.addWidget(self.mpl_widget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 866, 30))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menuHelp = QtGui.QMenu(self.menubar)
        self.menuHelp.setObjectName(_fromUtf8("menuHelp"))
        self.menuTable = QtGui.QMenu(self.menubar)
        self.menuTable.setObjectName(_fromUtf8("menuTable"))
        self.menuAGrid = QtGui.QMenu(self.menubar)
        self.menuAGrid.setObjectName(_fromUtf8("menuAGrid"))
        self.menuFlood = QtGui.QMenu(self.menuAGrid)
        self.menuFlood.setObjectName(_fromUtf8("menuFlood"))
        self.menuSpecial = QtGui.QMenu(self.menuAGrid)
        self.menuSpecial.setObjectName(_fromUtf8("menuSpecial"))
        self.menuCombine = QtGui.QMenu(self.menuAGrid)
        self.menuCombine.setObjectName(_fromUtf8("menuCombine"))
        self.menuSGrid = QtGui.QMenu(self.menubar)
        self.menuSGrid.setTitle(_fromUtf8("Simple_Grid"))
        self.menuSGrid.setObjectName(_fromUtf8("menuSGrid"))
        self.menuIO = QtGui.QMenu(self.menubar)
        self.menuIO.setToolTip(_fromUtf8(""))
        self.menuIO.setStatusTip(_fromUtf8(""))
        self.menuIO.setWhatsThis(_fromUtf8(""))
        self.menuIO.setObjectName(_fromUtf8("menuIO"))
        self.menuAnalysis = QtGui.QMenu(self.menubar)
        self.menuAnalysis.setTitle(_fromUtf8("Analysis"))
        self.menuAnalysis.setObjectName(_fromUtf8("menuAnalysis"))
        self.menuView = QtGui.QMenu(self.menubar)
        self.menuView.setObjectName(_fromUtf8("menuView"))
        self.menuKernel = QtGui.QMenu(self.menubar)
        self.menuKernel.setObjectName(_fromUtf8("menuKernel"))
        self.menuTools = QtGui.QMenu(self.menubar)
        self.menuTools.setObjectName(_fromUtf8("menuTools"))
        self.menuPoints = QtGui.QMenu(self.menubar)
        self.menuPoints.setObjectName(_fromUtf8("menuPoints"))
        self.menuInterpolate = QtGui.QMenu(self.menuPoints)
        self.menuInterpolate.setObjectName(_fromUtf8("menuInterpolate"))
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QtGui.QStatusBar(MainWindow)
        self.statusBar.setObjectName(_fromUtf8("statusBar"))
        MainWindow.setStatusBar(self.statusBar)
        self.toolBar = QtGui.QToolBar(MainWindow)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolBar.sizePolicy().hasHeightForWidth())
        self.toolBar.setSizePolicy(sizePolicy)
        self.toolBar.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.toolBar.setAutoFillBackground(False)
        self.toolBar.setMovable(True)
        self.toolBar.setOrientation(QtCore.Qt.Horizontal)
        self.toolBar.setObjectName(_fromUtf8("toolBar"))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionHDF_Open_All = QtGui.QAction(MainWindow)
        self.actionHDF_Open_All.setShortcut(_fromUtf8(""))
        self.actionHDF_Open_All.setObjectName(_fromUtf8("actionHDF_Open_All"))
        self.actionHDF_Save_Grid = QtGui.QAction(MainWindow)
        self.actionHDF_Save_Grid.setObjectName(_fromUtf8("actionHDF_Save_Grid"))
        self.actionASCII_Open = QtGui.QAction(MainWindow)
        self.actionASCII_Open.setObjectName(_fromUtf8("actionASCII_Open"))
        self.actionASCII_Save = QtGui.QAction(MainWindow)
        self.actionASCII_Save.setEnabled(True)
        self.actionASCII_Save.setObjectName(_fromUtf8("actionASCII_Save"))
        self.actionEXIT = QtGui.QAction(MainWindow)
        self.actionEXIT.setObjectName(_fromUtf8("actionEXIT"))
        self.actionHistogram = QtGui.QAction(MainWindow)
        self.actionHistogram.setObjectName(_fromUtf8("actionHistogram"))
        self.actionAbout = QtGui.QAction(MainWindow)
        self.actionAbout.setObjectName(_fromUtf8("actionAbout"))
        self.actionManual = QtGui.QAction(MainWindow)
        self.actionManual.setObjectName(_fromUtf8("actionManual"))
        self.actionZoom_in = QtGui.QAction(MainWindow)
        self.actionZoom_in.setCheckable(True)
        self.actionZoom_in.setObjectName(_fromUtf8("actionZoom_in"))
        self.actionGraph = QtGui.QAction(MainWindow)
        self.actionGraph.setCheckable(True)
        self.actionGraph.setObjectName(_fromUtf8("actionGraph"))
        self.actionStart_vis = QtGui.QAction(MainWindow)
        self.actionStart_vis.setObjectName(_fromUtf8("actionStart_vis"))
        self.actionGrid_copy = QtGui.QAction(MainWindow)
        self.actionGrid_copy.setObjectName(_fromUtf8("actionGrid_copy"))
        self.actionGrid_rename = QtGui.QAction(MainWindow)
        self.actionGrid_rename.setObjectName(_fromUtf8("actionGrid_rename"))
        self.actionRun_model = QtGui.QAction(MainWindow)
        self.actionRun_model.setObjectName(_fromUtf8("actionRun_model"))
        self.actionDelete = QtGui.QAction(MainWindow)
        self.actionDelete.setObjectName(_fromUtf8("actionDelete"))
        self.actionClear_p = QtGui.QAction(MainWindow)
        self.actionClear_p.setObjectName(_fromUtf8("actionClear_p"))
        self.actionReplot = QtGui.QAction(MainWindow)
        self.actionReplot.setCheckable(True)
        self.actionReplot.setObjectName(_fromUtf8("actionReplot"))
        self.actionFuzzy = QtGui.QAction(MainWindow)
        self.actionFuzzy.setObjectName(_fromUtf8("actionFuzzy"))
        self.actionFuzzy_Generator = QtGui.QAction(MainWindow)
        self.actionFuzzy_Generator.setEnabled(False)
        self.actionFuzzy_Generator.setObjectName(_fromUtf8("actionFuzzy_Generator"))
        self.actionSadato = QtGui.QAction(MainWindow)
        self.actionSadato.setEnabled(False)
        self.actionSadato.setObjectName(_fromUtf8("actionSadato"))
        self.actionColorbar = QtGui.QAction(MainWindow)
        self.actionColorbar.setCheckable(True)
        self.actionColorbar.setChecked(False)
        self.actionColorbar.setObjectName(_fromUtf8("actionColorbar"))
        self.actionStatistic = QtGui.QAction(MainWindow)
        self.actionStatistic.setObjectName(_fromUtf8("actionStatistic"))
        self.actionInfo = QtGui.QAction(MainWindow)
        self.actionInfo.setObjectName(_fromUtf8("actionInfo"))
        self.actionSet = QtGui.QAction(MainWindow)
        self.actionSet.setObjectName(_fromUtf8("actionSet"))
        self.actionReplace = QtGui.QAction(MainWindow)
        self.actionReplace.setObjectName(_fromUtf8("actionReplace"))
        self.actionAdd = QtGui.QAction(MainWindow)
        self.actionAdd.setObjectName(_fromUtf8("actionAdd"))
        self.actionMul = QtGui.QAction(MainWindow)
        self.actionMul.setObjectName(_fromUtf8("actionMul"))
        self.actionLog = QtGui.QAction(MainWindow)
        self.actionLog.setObjectName(_fromUtf8("actionLog"))
        self.actionNorm = QtGui.QAction(MainWindow)
        self.actionNorm.setObjectName(_fromUtf8("actionNorm"))
        self.actionInv = QtGui.QAction(MainWindow)
        self.actionInv.setObjectName(_fromUtf8("actionInv"))
        self.actionInv_a = QtGui.QAction(MainWindow)
        self.actionInv_a.setObjectName(_fromUtf8("actionInv_a"))
        self.actionCut = QtGui.QAction(MainWindow)
        self.actionCut.setObjectName(_fromUtf8("actionCut"))
        self.actionCut_Off = QtGui.QAction(MainWindow)
        self.actionCut_Off.setObjectName(_fromUtf8("actionCut_Off"))
        self.actionClass = QtGui.QAction(MainWindow)
        self.actionClass.setObjectName(_fromUtf8("actionClass"))
        self.actionLn = QtGui.QAction(MainWindow)
        self.actionLn.setObjectName(_fromUtf8("actionLn"))
        self.actionZNorm = QtGui.QAction(MainWindow)
        self.actionZNorm.setObjectName(_fromUtf8("actionZNorm"))
        self.actionShow_3d = QtGui.QAction(MainWindow)
        self.actionShow_3d.setCheckable(True)
        self.actionShow_3d.setObjectName(_fromUtf8("actionShow_3d"))
        self.actionShow_Range = QtGui.QAction(MainWindow)
        self.actionShow_Range.setCheckable(True)
        self.actionShow_Range.setObjectName(_fromUtf8("actionShow_Range"))
        self.actionShow_List = QtGui.QAction(MainWindow)
        self.actionShow_List.setCheckable(True)
        self.actionShow_List.setObjectName(_fromUtf8("actionShow_List"))
        self.actionKernel_sci = QtGui.QAction(MainWindow)
        self.actionKernel_sci.setObjectName(_fromUtf8("actionKernel_sci"))
        self.actionKernel_rect = QtGui.QAction(MainWindow)
        self.actionKernel_rect.setObjectName(_fromUtf8("actionKernel_rect"))
        self.actionKernel_cir = QtGui.QAction(MainWindow)
        self.actionKernel_cir.setObjectName(_fromUtf8("actionKernel_cir"))
        self.actionKnn = QtGui.QAction(MainWindow)
        self.actionKnn.setObjectName(_fromUtf8("actionKnn"))
        self.actionCorr = QtGui.QAction(MainWindow)
        self.actionCorr.setObjectName(_fromUtf8("actionCorr"))
        self.actionSample = QtGui.QAction(MainWindow)
        self.actionSample.setObjectName(_fromUtf8("actionSample"))
        self.actionPoisson = QtGui.QAction(MainWindow)
        self.actionPoisson.setObjectName(_fromUtf8("actionPoisson"))
        self.actionVoronoi = QtGui.QAction(MainWindow)
        self.actionVoronoi.setObjectName(_fromUtf8("actionVoronoi"))
        self.actionDistance = QtGui.QAction(MainWindow)
        self.actionDistance.setObjectName(_fromUtf8("actionDistance"))
        self.actionRand_Int = QtGui.QAction(MainWindow)
        self.actionRand_Int.setObjectName(_fromUtf8("actionRand_Int"))
        self.actionRand_Float = QtGui.QAction(MainWindow)
        self.actionRand_Float.setObjectName(_fromUtf8("actionRand_Float"))
        self.actionCombine_Add = QtGui.QAction(MainWindow)
        self.actionCombine_Add.setObjectName(_fromUtf8("actionCombine_Add"))
        self.actionCombine_Mul = QtGui.QAction(MainWindow)
        self.actionCombine_Mul.setObjectName(_fromUtf8("actionCombine_Mul"))
        self.actionCombine_Min = QtGui.QAction(MainWindow)
        self.actionCombine_Min.setObjectName(_fromUtf8("actionCombine_Min"))
        self.actionCombine_Max = QtGui.QAction(MainWindow)
        self.actionCombine_Max.setObjectName(_fromUtf8("actionCombine_Max"))
        self.actionCombine_OR = QtGui.QAction(MainWindow)
        self.actionCombine_OR.setObjectName(_fromUtf8("actionCombine_OR"))
        self.actionFlood_Fill = QtGui.QAction(MainWindow)
        self.actionFlood_Fill.setObjectName(_fromUtf8("actionFlood_Fill"))
        self.actionFlood_Fill_std = QtGui.QAction(MainWindow)
        self.actionFlood_Fill_std.setObjectName(_fromUtf8("actionFlood_Fill_std"))
        self.actionVarpart = QtGui.QAction(MainWindow)
        self.actionVarpart.setObjectName(_fromUtf8("actionVarpart"))
        self.actionMax_Sub = QtGui.QAction(MainWindow)
        self.actionMax_Sub.setObjectName(_fromUtf8("actionMax_Sub"))
        self.actionRemove_Trend = QtGui.QAction(MainWindow)
        self.actionRemove_Trend.setObjectName(_fromUtf8("actionRemove_Trend"))
        self.actionGrad_d4 = QtGui.QAction(MainWindow)
        self.actionGrad_d4.setObjectName(_fromUtf8("actionGrad_d4"))
        self.actionGrad_d8 = QtGui.QAction(MainWindow)
        self.actionGrad_d8.setObjectName(_fromUtf8("actionGrad_d8"))
        self.actionShow_Black_White = QtGui.QAction(MainWindow)
        self.actionShow_Black_White.setCheckable(True)
        self.actionShow_Black_White.setObjectName(_fromUtf8("actionShow_Black_White"))
        self.actionPOINT_Open_geo = QtGui.QAction(MainWindow)
        self.actionPOINT_Open_geo.setObjectName(_fromUtf8("actionPOINT_Open_geo"))
        self.actionPOINT_Open_i_j = QtGui.QAction(MainWindow)
        self.actionPOINT_Open_i_j.setObjectName(_fromUtf8("actionPOINT_Open_i_j"))
        self.actionPOINTS_Inter_linear = QtGui.QAction(MainWindow)
        self.actionPOINTS_Inter_linear.setWhatsThis(_fromUtf8(""))
        self.actionPOINTS_Inter_linear.setObjectName(_fromUtf8("actionPOINTS_Inter_linear"))
        self.actionPOINTS_Inter_multiquadric = QtGui.QAction(MainWindow)
        self.actionPOINTS_Inter_multiquadric.setObjectName(_fromUtf8("actionPOINTS_Inter_multiquadric"))
        self.actionPOINTS_Inter_inverse = QtGui.QAction(MainWindow)
        self.actionPOINTS_Inter_inverse.setObjectName(_fromUtf8("actionPOINTS_Inter_inverse"))
        self.actionPOINTS_Inter_gaussian = QtGui.QAction(MainWindow)
        self.actionPOINTS_Inter_gaussian.setObjectName(_fromUtf8("actionPOINTS_Inter_gaussian"))
        self.actionPOINTS_Inter_cubic = QtGui.QAction(MainWindow)
        self.actionPOINTS_Inter_cubic.setObjectName(_fromUtf8("actionPOINTS_Inter_cubic"))
        self.actionPOINTS_Inter_quintic = QtGui.QAction(MainWindow)
        self.actionPOINTS_Inter_quintic.setObjectName(_fromUtf8("actionPOINTS_Inter_quintic"))
        self.actionPOINTS_Inter_thin_plate = QtGui.QAction(MainWindow)
        self.actionPOINTS_Inter_thin_plate.setObjectName(_fromUtf8("actionPOINTS_Inter_thin_plate"))
        self.actionCond = QtGui.QAction(MainWindow)
        self.actionCond.setObjectName(_fromUtf8("actionCond"))
        self.actionSample_det = QtGui.QAction(MainWindow)
        self.actionSample_det.setObjectName(_fromUtf8("actionSample_det"))
        self.actionSample_neg = QtGui.QAction(MainWindow)
        self.actionSample_neg.setObjectName(_fromUtf8("actionSample_neg"))
        self.actionResize = QtGui.QAction(MainWindow)
        self.actionResize.setObjectName(_fromUtf8("actionResize"))
        self.actionShow_Diff = QtGui.QAction(MainWindow)
        self.actionShow_Diff.setCheckable(True)
        self.actionShow_Diff.setObjectName(_fromUtf8("actionShow_Diff"))
        self.actionTABLE_Lut = QtGui.QAction(MainWindow)
        self.actionTABLE_Lut.setObjectName(_fromUtf8("actionTABLE_Lut"))
        self.actionCombine_Diff = QtGui.QAction(MainWindow)
        self.actionCombine_Diff.setObjectName(_fromUtf8("actionCombine_Diff"))
        self.actionFabs = QtGui.QAction(MainWindow)
        self.actionFabs.setObjectName(_fromUtf8("actionFabs"))
        self.actionExport_R = QtGui.QAction(MainWindow)
        self.actionExport_R.setObjectName(_fromUtf8("actionExport_R"))
        self.actionFUZZY_Open = QtGui.QAction(MainWindow)
        self.actionFUZZY_Open.setObjectName(_fromUtf8("actionFUZZY_Open"))
        self.actionSVM_Open = QtGui.QAction(MainWindow)
        self.actionSVM_Open.setObjectName(_fromUtf8("actionSVM_Open"))
        self.actionMake_Map = QtGui.QAction(MainWindow)
        self.actionMake_Map.setObjectName(_fromUtf8("actionMake_Map"))
        self.actionSelect = QtGui.QAction(MainWindow)
        self.actionSelect.setObjectName(_fromUtf8("actionSelect"))
        self.actionCombine_AND = QtGui.QAction(MainWindow)
        self.actionCombine_AND.setObjectName(_fromUtf8("actionCombine_AND"))
        self.actionFuzzy_Analysis = QtGui.QAction(MainWindow)
        self.actionFuzzy_Analysis.setCheckable(True)
        self.actionFuzzy_Analysis.setObjectName(_fromUtf8("actionFuzzy_Analysis"))
        self.actionCreate = QtGui.QAction(MainWindow)
        self.actionCreate.setObjectName(_fromUtf8("actionCreate"))
        self.actionSet_ND = QtGui.QAction(MainWindow)
        self.actionSet_ND.setObjectName(_fromUtf8("actionSet_ND"))
        self.actionEntropy = QtGui.QAction(MainWindow)
        self.actionEntropy.setObjectName(_fromUtf8("actionEntropy"))
        self.actionEntropy_S = QtGui.QAction(MainWindow)
        self.actionEntropy_S.setObjectName(_fromUtf8("actionEntropy_S"))
        self.actionComplexity = QtGui.QAction(MainWindow)
        self.actionComplexity.setObjectName(_fromUtf8("actionComplexity"))
        self.actionMajorization = QtGui.QAction(MainWindow)
        self.actionMajorization.setObjectName(_fromUtf8("actionMajorization"))
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionManual)
        self.menuTable.addAction(self.actionTABLE_Lut)
        self.menuTable.addAction(self.actionSelect)
        self.menuFlood.addAction(self.actionFlood_Fill)
        self.menuFlood.addAction(self.actionFlood_Fill_std)
        self.menuSpecial.addAction(self.actionVarpart)
        self.menuSpecial.addAction(self.actionRemove_Trend)
        self.menuSpecial.addAction(self.actionGrad_d4)
        self.menuSpecial.addAction(self.actionGrad_d8)
        self.menuCombine.addAction(self.actionCombine_Add)
        self.menuCombine.addAction(self.actionCombine_Diff)
        self.menuCombine.addAction(self.actionCombine_Mul)
        self.menuCombine.addAction(self.actionCombine_Min)
        self.menuCombine.addAction(self.actionCombine_Max)
        self.menuCombine.addAction(self.actionCombine_OR)
        self.menuCombine.addAction(self.actionCombine_AND)
        self.menuAGrid.addAction(self.menuCombine.menuAction())
        self.menuAGrid.addAction(self.menuFlood.menuAction())
        self.menuAGrid.addAction(self.menuSpecial.menuAction())
        self.menuSGrid.addAction(self.actionCreate)
        self.menuSGrid.addAction(self.actionSet)
        self.menuSGrid.addAction(self.actionSet_ND)
        self.menuSGrid.addAction(self.actionReplace)
        self.menuSGrid.addAction(self.actionAdd)
        self.menuSGrid.addAction(self.actionMul)
        self.menuSGrid.addAction(self.actionLog)
        self.menuSGrid.addAction(self.actionLn)
        self.menuSGrid.addAction(self.actionFabs)
        self.menuSGrid.addAction(self.actionNorm)
        self.menuSGrid.addAction(self.actionZNorm)
        self.menuSGrid.addAction(self.actionInv)
        self.menuSGrid.addAction(self.actionInv_a)
        self.menuSGrid.addAction(self.actionCond)
        self.menuSGrid.addAction(self.actionCut)
        self.menuSGrid.addAction(self.actionCut_Off)
        self.menuSGrid.addAction(self.actionClass)
        self.menuSGrid.addAction(self.actionRand_Int)
        self.menuSGrid.addAction(self.actionRand_Float)
        self.menuIO.addAction(self.actionHDF_Open_All)
        self.menuIO.addAction(self.actionHDF_Save_Grid)
        self.menuIO.addSeparator()
        self.menuIO.addAction(self.actionASCII_Open)
        self.menuIO.addAction(self.actionASCII_Save)
        self.menuIO.addSeparator()
        self.menuIO.addAction(self.actionPOINT_Open_geo)
        self.menuIO.addAction(self.actionPOINT_Open_i_j)
        self.menuIO.addSeparator()
        self.menuIO.addAction(self.actionFUZZY_Open)
        self.menuIO.addAction(self.actionSVM_Open)
        self.menuIO.addSeparator()
        self.menuIO.addAction(self.actionEXIT)
        self.menuAnalysis.addAction(self.actionHistogram)
        self.menuAnalysis.addAction(self.actionStatistic)
        self.menuAnalysis.addAction(self.actionInfo)
        self.menuAnalysis.addSeparator()
        self.menuAnalysis.addAction(self.actionCorr)
        self.menuAnalysis.addAction(self.actionEntropy)
        self.menuAnalysis.addAction(self.actionEntropy_S)
        self.menuAnalysis.addAction(self.actionComplexity)
        self.menuAnalysis.addAction(self.actionMajorization)
        self.menuAnalysis.addSeparator()
        self.menuAnalysis.addAction(self.actionMake_Map)
        self.menuAnalysis.addAction(self.actionResize)
        self.menuAnalysis.addSeparator()
        self.menuAnalysis.addAction(self.actionFuzzy_Analysis)
        self.menuAnalysis.addSeparator()
        self.menuAnalysis.addAction(self.actionSample)
        self.menuAnalysis.addAction(self.actionSample_det)
        self.menuAnalysis.addAction(self.actionExport_R)
        self.menuView.addAction(self.actionColorbar)
        self.menuView.addAction(self.actionShow_Diff)
        self.menuView.addAction(self.actionShow_3d)
        self.menuView.addAction(self.actionShow_Range)
        self.menuView.addAction(self.actionShow_List)
        self.menuView.addAction(self.actionShow_Black_White)
        self.menuKernel.addAction(self.actionKernel_sci)
        self.menuKernel.addAction(self.actionKernel_rect)
        self.menuKernel.addAction(self.actionKernel_cir)
        self.menuKernel.addSeparator()
        self.menuKernel.addAction(self.actionKnn)
        self.menuTools.addAction(self.actionFuzzy)
        self.menuInterpolate.addAction(self.actionPOINTS_Inter_linear)
        self.menuInterpolate.addAction(self.actionPOINTS_Inter_multiquadric)
        self.menuInterpolate.addAction(self.actionPOINTS_Inter_inverse)
        self.menuInterpolate.addAction(self.actionPOINTS_Inter_gaussian)
        self.menuInterpolate.addAction(self.actionPOINTS_Inter_cubic)
        self.menuInterpolate.addAction(self.actionPOINTS_Inter_quintic)
        self.menuInterpolate.addAction(self.actionPOINTS_Inter_thin_plate)
        self.menuPoints.addAction(self.menuInterpolate.menuAction())
        self.menuPoints.addAction(self.actionPoisson)
        self.menuPoints.addAction(self.actionVoronoi)
        self.menuPoints.addAction(self.actionDistance)
        self.menubar.addAction(self.menuIO.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuAnalysis.menuAction())
        self.menubar.addAction(self.menuSGrid.menuAction())
        self.menubar.addAction(self.menuAGrid.menuAction())
        self.menubar.addAction(self.menuKernel.menuAction())
        self.menubar.addAction(self.menuPoints.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuTable.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.actionZoom_in)
        self.toolBar.addAction(self.actionGraph)
        self.toolBar.addAction(self.actionReplot)
        self.toolBar.addAction(self.actionStart_vis)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionGrid_copy)
        self.toolBar.addAction(self.actionGrid_rename)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionRun_model)
        self.toolBar.addAction(self.actionDelete)
        self.toolBar.addAction(self.actionClear_p)
        self.toolBar.addSeparator()

        self.retranslateUi(MainWindow)
        QtCore.QObject.connect(self.actionEXIT, QtCore.SIGNAL(_fromUtf8("activated()")), MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate("MainWindow", "SAMT 2", None))
        self.treeWidget.setToolTip(_translate("MainWindow", "Double Click to move selected item to P1,P2,P3", None))
        self.treeWidget.setWhatsThis(_translate("MainWindow", "Double Click to move selected item to P1,P2,P3", None))
        self.treeWidget.headerItem().setText(0, _translate("MainWindow", "1", None))
        self.menuHelp.setTitle(_translate("MainWindow", "Help", None))
        self.menuTable.setTitle(_translate("MainWindow", "Table", None))
        self.menuAGrid.setTitle(_translate("MainWindow", "Advanced_Grid", None))
        self.menuFlood.setTitle(_translate("MainWindow", "Flood", None))
        self.menuSpecial.setTitle(_translate("MainWindow", "Special", None))
        self.menuCombine.setTitle(_translate("MainWindow", "Combine", None))
        self.menuIO.setTitle(_translate("MainWindow", "IO", None))
        self.menuView.setTitle(_translate("MainWindow", "View", None))
        self.menuKernel.setTitle(_translate("MainWindow", "Kernel", None))
        self.menuTools.setTitle(_translate("MainWindow", "Tools", None))
        self.menuPoints.setTitle(_translate("MainWindow", "Points", None))
        self.menuInterpolate.setTitle(_translate("MainWindow", "Interpolate", None))
        self.actionHDF_Open_All.setText(_translate("MainWindow", "HDF_Open", None))
        self.actionHDF_Open_All.setStatusTip(_translate("MainWindow", "HDF_Open: loads the dataset (set) from h5 ", None))
        self.actionHDF_Open_All.setWhatsThis(_translate("MainWindow", "Opens an HDF File System", None))
        self.actionHDF_Save_Grid.setText(_translate("MainWindow", "HDF_Save_Grid", None))
        self.actionHDF_Save_Grid.setToolTip(_translate("MainWindow", "HDF_Save_Grid ", None))
        self.actionHDF_Save_Grid.setStatusTip(_translate("MainWindow", "HDF_Save_Grid:  writes a new hdf or appends an existing, P1: gridname P2: model P3:modeller", None))
        self.actionHDF_Save_Grid.setWhatsThis(_translate("MainWindow", "Save_Grid   (highlighted) P1: gridname P2: model P3:modeller", None))
        self.actionASCII_Open.setText(_translate("MainWindow", "ASCII_Open", None))
        self.actionASCII_Open.setStatusTip(_translate("MainWindow", "ASCII_Open :reads  a ASCII File", None))
        self.actionASCII_Open.setWhatsThis(_translate("MainWindow", "ASCII_Open", None))
        self.actionASCII_Save.setText(_translate("MainWindow", "ASCII_Save", None))
        self.actionASCII_Save.setStatusTip(_translate("MainWindow", "ASCII_Save writes an  ASCII File", None))
        self.actionASCII_Save.setWhatsThis(_translate("MainWindow", "ASCII_Save  (highlighted)", None))
        self.actionEXIT.setText(_translate("MainWindow", "EXIT", None))
        self.actionHistogram.setText(_translate("MainWindow", "Histogram", None))
        self.actionHistogram.setStatusTip(_translate("MainWindow", "Histogram:  shows a histogram of the highlighted grid with P1=bins=20", None))
        self.actionAbout.setText(_translate("MainWindow", "About", None))
        self.actionManual.setText(_translate("MainWindow", "Manual", None))
        self.actionZoom_in.setText(_translate("MainWindow", "zoom_in", None))
        self.actionZoom_in.setToolTip(_translate("MainWindow", "zoom_in toggles between zoom mode and normal mode", None))
        self.actionZoom_in.setStatusTip(_translate("MainWindow", "toggles between zoom mode and normal mode", None))
        self.actionZoom_in.setWhatsThis(_translate("MainWindow", "zoom in selected area", None))
        self.actionGraph.setText(_translate("MainWindow", "graph", None))
        self.actionGraph.setToolTip(_translate("MainWindow", "draw a graph along a line", None))
        self.actionGraph.setStatusTip(_translate("MainWindow", "draw a graph along a line ", None))
        self.actionGraph.setWhatsThis(_translate("MainWindow", "draw a graph along a line", None))
        self.actionStart_vis.setText(_translate("MainWindow", "start_vis", None))
        self.actionStart_vis.setToolTip(_translate("MainWindow", "start a new visualization", None))
        self.actionStart_vis.setStatusTip(_translate("MainWindow", "start a new visualization", None))
        self.actionStart_vis.setWhatsThis(_translate("MainWindow", "start a new visualization", None))
        self.actionGrid_copy.setText(_translate("MainWindow", "grid_copy", None))
        self.actionGrid_copy.setToolTip(_translate("MainWindow", "copy the highlighted grid with P1:name", None))
        self.actionGrid_copy.setStatusTip(_translate("MainWindow", "copy the highlighted grid with P1:name", None))
        self.actionGrid_copy.setWhatsThis(_translate("MainWindow", "copy the highlighted grid with P1:name", None))
        self.actionGrid_rename.setText(_translate("MainWindow", "grid_rename", None))
        self.actionGrid_rename.setToolTip(_translate("MainWindow", "rename the highlighted grid with P1: name", None))
        self.actionGrid_rename.setStatusTip(_translate("MainWindow", "rename the highlighted grid with P1: name", None))
        self.actionGrid_rename.setWhatsThis(_translate("MainWindow", "rename the highlighted grid with P1: name", None))
        self.actionRun_model.setText(_translate("MainWindow", "run_model", None))
        self.actionRun_model.setToolTip(_translate("MainWindow", "run the highlighted model", None))
        self.actionRun_model.setStatusTip(_translate("MainWindow", "run the highlighted model", None))
        self.actionRun_model.setWhatsThis(_translate("MainWindow", "run the highlighted model", None))
        self.actionDelete.setText(_translate("MainWindow", "delete_", None))
        self.actionDelete.setToolTip(_translate("MainWindow", "delete a (highlighted) grid, point theme, line theme, texture, model,", None))
        self.actionDelete.setStatusTip(_translate("MainWindow", "delete a (highlighted) grid, point theme, line theme, texture, model,", None))
        self.actionDelete.setWhatsThis(_translate("MainWindow", "delete a (highlighted) grid, point theme, line theme, texture, model,", None))
        self.actionClear_p.setText(_translate("MainWindow", "clear_p", None))
        self.actionClear_p.setToolTip(_translate("MainWindow", "clear P1,P2,P3", None))
        self.actionClear_p.setStatusTip(_translate("MainWindow", "clear P1,P2,P3", None))
        self.actionClear_p.setWhatsThis(_translate("MainWindow", "clear P1,P2,P3", None))
        self.actionReplot.setText(_translate("MainWindow", "replot", None))
        self.actionReplot.setToolTip(_translate("MainWindow", "replot: plots a chart over a transect using the old line ", None))
        self.actionReplot.setStatusTip(_translate("MainWindow", "replot: plots a chart over a transect using the old line ", None))
        self.actionFuzzy.setText(_translate("MainWindow", "SAMT2-Fuzzy", None))
        self.actionFuzzy.setStatusTip(_translate("MainWindow", "SAMT2-Fuzzy:  Opens the fuzzy development tool", None))
        self.actionFuzzy_Generator.setText(_translate("MainWindow", "Fuzzy-Generator", None))
        self.actionFuzzy_Generator.setStatusTip(_translate("MainWindow", "Fuzzy-Generator:  Opens the fuzzy generator to train a fuzzy model with data ", None))
        self.actionSadato.setText(_translate("MainWindow", "Sadato", None))
        self.actionSadato.setStatusTip(_translate("MainWindow", "Sadato: Opens the Sadato development tool", None))
        self.actionColorbar.setText(_translate("MainWindow", "Colorbar", None))
        self.actionColorbar.setStatusTip(_translate("MainWindow", "Colorbar:  opens a separate window with a colorbar  P1= min, P2= max optional", None))
        self.actionStatistic.setText(_translate("MainWindow", "Statistics", None))
        self.actionStatistic.setStatusTip(_translate("MainWindow", "Statistics:  shows statistics in a separate window: P1=min,  P2=max,  P3=std", None))
        self.actionInfo.setText(_translate("MainWindow", "Info", None))
        self.actionInfo.setStatusTip(_translate("MainWindow", "Info:  shows in: P1=nrows,  P2=ncols,  P3=nodata", None))
        self.actionSet.setText(_translate("MainWindow", "Set", None))
        self.actionSet.setStatusTip(_translate("MainWindow", "Set:  set mat=P1, (overwrite)  ", None))
        self.actionReplace.setText(_translate("MainWindow", "Replace", None))
        self.actionReplace.setStatusTip(_translate("MainWindow", "Replace:  replaces the value P1 with the value P2, ( overwrite) ", None))
        self.actionAdd.setText(_translate("MainWindow", "Add", None))
        self.actionAdd.setStatusTip(_translate("MainWindow", "Add:  mat+=P1,  (overwrite) ", None))
        self.actionMul.setText(_translate("MainWindow", "Mul", None))
        self.actionMul.setStatusTip(_translate("MainWindow", "Mul:  mat*=P1,  (overwrite)", None))
        self.actionLog.setText(_translate("MainWindow", "Log", None))
        self.actionLog.setStatusTip(_translate("MainWindow", "Log:  calculates the  lg(P1+x)  for all  x>=0,  (overwrite)", None))
        self.actionNorm.setText(_translate("MainWindow", "Norm", None))
        self.actionNorm.setStatusTip(_translate("MainWindow", "Norm:   mat=(mat-gridmin)/(gridmax-gridmin),  (overwrite) ", None))
        self.actionInv.setText(_translate("MainWindow", "Inv", None))
        self.actionInv.setStatusTip(_translate("MainWindow", "Inv:  calculates:  gridmax-mat+gridmin,  (overwrite)", None))
        self.actionInv_a.setText(_translate("MainWindow", "Inv_a", None))
        self.actionInv_a.setStatusTip(_translate("MainWindow", "Inv_ab:  calculates: a-mat,  P1=a,  (overwrite)", None))
        self.actionCut.setText(_translate("MainWindow", "Cut", None))
        self.actionCut.setStatusTip(_translate("MainWindow", "Cut:  clamps the mat:  if(mat>P1)  mat=P2=nodata,  (overwrite)", None))
        self.actionCut_Off.setText(_translate("MainWindow", "Cut_Off", None))
        self.actionCut_Off.setStatusTip(_translate("MainWindow", "Cut_Off:  sets all values in the range ([P1,P2)  to  P3=nodata,  (overwrite)", None))
        self.actionClass.setText(_translate("MainWindow", "Class", None))
        self.actionClass.setStatusTip(_translate("MainWindow", "Class: classifies the continuous grid into n  P1= 10 discrete classes", None))
        self.actionLn.setText(_translate("MainWindow", "Ln", None))
        self.actionLn.setStatusTip(_translate("MainWindow", "Ln:  calculates the  ln(P1+x)  for all  x>=0,  (overwrite)", None))
        self.actionZNorm.setText(_translate("MainWindow", "ZNorm", None))
        self.actionZNorm.setStatusTip(_translate("MainWindow", "ZNorm:  mat=(mat-mean)/std,  (overwrite)", None))
        self.actionShow_3d.setText(_translate("MainWindow", "Show_3d", None))
        self.actionShow_3d.setStatusTip(_translate("MainWindow", "Show_3d:  shows a 3d view with a stride P1=10 (larger strides: lower resolution)", None))
        self.actionShow_Range.setText(_translate("MainWindow", "Show_Range", None))
        self.actionShow_Range.setStatusTip(_translate("MainWindow", "Show_Range:  show only values between P1=min and P2=max", None))
        self.actionShow_List.setText(_translate("MainWindow", "Show_List", None))
        self.actionShow_List.setStatusTip(_translate("MainWindow", "Show_List:  show a list used to select only discrete values of a grid", None))
        self.actionKernel_sci.setText(_translate("MainWindow", "Kernel_sci", None))
        self.actionKernel_sci.setStatusTip(_translate("MainWindow", "Kernel_sci:  Gaussian kernel with  P1=height,  P2=width,  P3=sigma=1,  (overwrite) ", None))
        self.actionKernel_rect.setText(_translate("MainWindow", "Kernel_rect", None))
        self.actionKernel_rect.setStatusTip(_translate("MainWindow", "Kernel_rect:  rectangular kernel with  P1=height,  P2=width,  (overwrite)", None))
        self.actionKernel_cir.setText(_translate("MainWindow", "Kernel_cir", None))
        self.actionKernel_cir.setStatusTip(_translate("MainWindow", "Kernel_cir:  circular kernel with  P1=radius,  (overwrite)", None))
        self.actionKnn.setText(_translate("MainWindow", "Knn", None))
        self.actionKnn.setStatusTip(_translate("MainWindow", "Knn:  k nearest neighbor:  P1=k,  P2=min,  P3=max,  (overwrite) ", None))
        self.actionCorr.setText(_translate("MainWindow", "Corr", None))
        self.actionCorr.setStatusTip(_translate("MainWindow", "Corr:   correlates the highlighted grid with the grid in P1,  P2=corr", None))
        self.actionSample.setText(_translate("MainWindow", "Sample ", None))
        self.actionSample.setStatusTip(_translate("MainWindow", "Sample:  samples  P1=100  random points from the highlighted grid ", None))
        self.actionPoisson.setText(_translate("MainWindow", "Poisson", None))
        self.actionPoisson.setStatusTip(_translate("MainWindow", "Poisson:  solves the Poisson equation: highlight=points,  P1=grid,  P2=eps,  P3=iter", None))
        self.actionVoronoi.setText(_translate("MainWindow", "Voronoi", None))
        self.actionVoronoi.setStatusTip(_translate("MainWindow", "Voronoi:   calculates a voroni map from a highlighted=points,  P1=grid", None))
        self.actionDistance.setText(_translate("MainWindow", "Distance", None))
        self.actionDistance.setIconText(_translate("MainWindow", "Distance", None))
        self.actionDistance.setToolTip(_translate("MainWindow", "Distance", None))
        self.actionDistance.setStatusTip(_translate("MainWindow", "Distance:  calculates the euclidean distance between the highlighted=points,  P1=grid", None))
        self.actionRand_Int.setText(_translate("MainWindow", "Rand_Int", None))
        self.actionRand_Int.setStatusTip(_translate("MainWindow", "Rand_Int:  mat=randint(P1=0, P2=10),  (overwrite)", None))
        self.actionRand_Float.setText(_translate("MainWindow", "Rand_Float", None))
        self.actionRand_Float.setStatusTip(_translate("MainWindow", "Rand_Float:  mat=randfloat(),  (overwrite) ", None))
        self.actionCombine_Add.setText(_translate("MainWindow", "Combine_Add", None))
        self.actionCombine_Add.setStatusTip(_translate("MainWindow", "Combine_Add:  P1=g1:  mat=mat+g1,  (overwrite)", None))
        self.actionCombine_Mul.setText(_translate("MainWindow", "Combine_Mul", None))
        self.actionCombine_Mul.setStatusTip(_translate("MainWindow", "Combine_Mul:  P1=g1:  mat=mat*g1,  (overwrite)", None))
        self.actionCombine_Min.setText(_translate("MainWindow", "Combine_Min", None))
        self.actionCombine_Min.setStatusTip(_translate("MainWindow", "Combine_Min:  P1=g1:  mat=min(mat,g1)  (overwrite)", None))
        self.actionCombine_Max.setText(_translate("MainWindow", "Combine_Max", None))
        self.actionCombine_Max.setStatusTip(_translate("MainWindow", "Combine_Max:  P1=g1:  mat=max(mat,g1)  (overwrite)", None))
        self.actionCombine_OR.setText(_translate("MainWindow", "Combine_OR", None))
        self.actionCombine_OR.setStatusTip(_translate("MainWindow", "Combine_Or:  P1=g1:  if(mat==nodata)  mat=g1 ( overwrite)", None))
        self.actionFlood_Fill.setText(_translate("MainWindow", "Flood_Fill", None))
        self.actionFlood_Fill.setStatusTip(_translate("MainWindow", "Flood_Fill:  floods a region:  P=i,  P2=j,  P3=level  (overwrite)  return  P1= counts", None))
        self.actionFlood_Fill_std.setText(_translate("MainWindow", "Flood_Fill_std", None))
        self.actionFlood_Fill_std.setStatusTip(_translate("MainWindow", "Flood_Fill_std:  floods a region:   P1=i,  P2=j,  P3=level  (overwrite)  return  P1=std, P2=varianz", None))
        self.actionVarpart.setText(_translate("MainWindow", "Varpart", None))
        self.actionVarpart.setStatusTip(_translate("MainWindow", "Varpart:  creates a new grid with minimum variance clustering  P1=5000  cluster", None))
        self.actionMax_Sub.setText(_translate("MainWindow", "Max_Sub", None))
        self.actionMax_Sub.setStatusTip(_translate("MainWindow", "Max_Sub:  finds the maximum subarray greater than P1 ( overwrite)", None))
        self.actionRemove_Trend.setText(_translate("MainWindow", "Remove_Trend", None))
        self.actionRemove_Trend.setStatusTip(_translate("MainWindow", "Remove_Trend:  removes the trend to find local minmax:  using  P1=2000  sample points  (overwrite)", None))
        self.actionGrad_d4.setText(_translate("MainWindow", "Grad_d4", None))
        self.actionGrad_d4.setStatusTip(_translate("MainWindow", "Grad_d4:  calculates the gradient of a d4 environment", None))
        self.actionGrad_d8.setText(_translate("MainWindow", "Grad_d8", None))
        self.actionGrad_d8.setStatusTip(_translate("MainWindow", "Grad_d8:  calculates the gradient of a d8 environment", None))
        self.actionShow_Black_White.setText(_translate("MainWindow", "Show_Black_White", None))
        self.actionShow_Black_White.setStatusTip(_translate("MainWindow", "Show_Black_White:  switches between bw and color", None))
        self.actionPOINT_Open_geo.setText(_translate("MainWindow", "POINT_Open_geo", None))
        self.actionPOINT_Open_geo.setStatusTip(_translate("MainWindow", "POINT_Open_geo:  highlight a grid which covers the points", None))
        self.actionPOINT_Open_i_j.setText(_translate("MainWindow", "POINT_Open_i_j", None))
        self.actionPOINT_Open_i_j.setStatusTip(_translate("MainWindow", "POINT_Open_i_j:  highlight a grid which covers the points", None))
        self.actionPOINTS_Inter_linear.setText(_translate("MainWindow", "linear", None))
        self.actionPOINTS_Inter_linear.setIconText(_translate("MainWindow", "linear", None))
        self.actionPOINTS_Inter_linear.setToolTip(_translate("MainWindow", "linear", None))
        self.actionPOINTS_Inter_linear.setStatusTip(_translate("MainWindow", "Interpolate:  P1=grid,  highlighted=points", None))
        self.actionPOINTS_Inter_multiquadric.setText(_translate("MainWindow", "multiquadric", None))
        self.actionPOINTS_Inter_multiquadric.setIconText(_translate("MainWindow", "multiquadric", None))
        self.actionPOINTS_Inter_multiquadric.setToolTip(_translate("MainWindow", "multiquadric", None))
        self.actionPOINTS_Inter_multiquadric.setStatusTip(_translate("MainWindow", "Interpolate:  P1=grid,  highlighted=points", None))
        self.actionPOINTS_Inter_inverse.setText(_translate("MainWindow", " inverse", None))
        self.actionPOINTS_Inter_inverse.setIconText(_translate("MainWindow", " inverse", None))
        self.actionPOINTS_Inter_inverse.setToolTip(_translate("MainWindow", " inverse", None))
        self.actionPOINTS_Inter_inverse.setStatusTip(_translate("MainWindow", "Interpolate:  P1=grid,  highlighted=points", None))
        self.actionPOINTS_Inter_gaussian.setText(_translate("MainWindow", "gaussian", None))
        self.actionPOINTS_Inter_gaussian.setIconText(_translate("MainWindow", "gaussian", None))
        self.actionPOINTS_Inter_gaussian.setToolTip(_translate("MainWindow", "gaussian", None))
        self.actionPOINTS_Inter_gaussian.setStatusTip(_translate("MainWindow", "Interpolate:  P1=grid,  highlighted=points", None))
        self.actionPOINTS_Inter_cubic.setText(_translate("MainWindow", "cubic", None))
        self.actionPOINTS_Inter_cubic.setIconText(_translate("MainWindow", "cubic", None))
        self.actionPOINTS_Inter_cubic.setToolTip(_translate("MainWindow", "cubic", None))
        self.actionPOINTS_Inter_cubic.setStatusTip(_translate("MainWindow", "Interpolate:  P1=grid,  highlighted=points", None))
        self.actionPOINTS_Inter_quintic.setText(_translate("MainWindow", "quintic", None))
        self.actionPOINTS_Inter_quintic.setIconText(_translate("MainWindow", "quintic", None))
        self.actionPOINTS_Inter_quintic.setToolTip(_translate("MainWindow", "quintic", None))
        self.actionPOINTS_Inter_quintic.setStatusTip(_translate("MainWindow", "Interpolate:  P1=grid,  highlighted=points", None))
        self.actionPOINTS_Inter_thin_plate.setText(_translate("MainWindow", "thin_plate", None))
        self.actionPOINTS_Inter_thin_plate.setIconText(_translate("MainWindow", "thin_plate", None))
        self.actionPOINTS_Inter_thin_plate.setStatusTip(_translate("MainWindow", "Interpolate:  P1=grid,  highlighted=points", None))
        self.actionCond.setText(_translate("MainWindow", "Cond", None))
        self.actionCond.setStatusTip(_translate("MainWindow", "Cond: if(mat<P1)  mat=P1,  if(mat>P2)  mat=P3,  (overwrite)", None))
        self.actionSample_det.setText(_translate("MainWindow", "Sample_det", None))
        self.actionSample_det.setStatusTip(_translate("MainWindow", "Sample_det:  samples   P1=val all points for mat[i,j]==val ", None))
        self.actionSample_neg.setText(_translate("MainWindow", "Sample_neg", None))
        self.actionSample_neg.setStatusTip(_translate("MainWindow", "Sample_neg: ", None))
        self.actionResize.setText(_translate("MainWindow", "Resize", None))
        self.actionResize.setStatusTip(_translate("MainWindow", "Resize:  resizes a grid using splines,  P1=nrows,  P2=ncols  ", None))
        self.actionShow_Diff.setText(_translate("MainWindow", "Show_Diff", None))
        self.actionShow_Diff.setStatusTip(_translate("MainWindow", "Show Diff:   shows the difference between the highlighted and the P1", None))
        self.actionTABLE_Lut.setText(_translate("MainWindow", "Lut", None))
        self.actionTABLE_Lut.setToolTip(_translate("MainWindow", "Lut ", None))
        self.actionTABLE_Lut.setStatusTip(_translate("MainWindow", "Lut:  replaces discrete values mat with new values", None))
        self.actionCombine_Diff.setText(_translate("MainWindow", "Combine_Diff", None))
        self.actionCombine_Diff.setStatusTip(_translate("MainWindow", "Combine_Diff:  P1=g1:  mat=mat-g1,  (overwrite) ", None))
        self.actionFabs.setText(_translate("MainWindow", "Fabs", None))
        self.actionFabs.setStatusTip(_translate("MainWindow", "Fabs:  calculates the  fabs(mat),  (overwrite)", None))
        self.actionExport_R.setText(_translate("MainWindow", "Export_R", None))
        self.actionExport_R.setStatusTip(_translate("MainWindow", "Export_R:  samples P1=100 from the highlighted=g1 and  P2=g2,  P3=g3", None))
        self.actionFUZZY_Open.setText(_translate("MainWindow", "FUZZY_Open", None))
        self.actionSVM_Open.setText(_translate("MainWindow", "SVM_Open", None))
        self.actionSVM_Open.setStatusTip(_translate("MainWindow", "SVM_Open:", None))
        self.actionMake_Map.setText(_translate("MainWindow", "Make_Map", None))
        self.actionMake_Map.setStatusTip(_translate("MainWindow", "Make_Map", None))
        self.actionSelect.setText(_translate("MainWindow", "Select", None))
        self.actionSelect.setStatusTip(_translate("MainWindow", "Select:  allows to select discrete values using a tabular", None))
        self.actionCombine_AND.setText(_translate("MainWindow", "Combine_AND", None))
        self.actionCombine_AND.setStatusTip(_translate("MainWindow", "Combine_AND: includes nodata from P1: g1  in gx", None))
        self.actionFuzzy_Analysis.setText(_translate("MainWindow", "Fuzzy_Analysis", None))
        self.actionFuzzy_Analysis.setStatusTip(_translate("MainWindow", "Fuzzy_Analysis:  P1=grid,  P2=[grid],  P3=[grid],  highlighted fuzzy model", None))
        self.actionCreate.setText(_translate("MainWindow", "Create", None))
        self.actionCreate.setStatusTip(_translate("MainWindow", "creates a random grid with P1=name, P2=rows, P3=cols", None))
        self.actionSet_ND.setText(_translate("MainWindow", "Set_ND", None))
        self.actionSet_ND.setStatusTip(_translate("MainWindow", "Set_ND: set all value exept nodata=P1, (overwrite) ", None))
        self.actionEntropy.setText(_translate("MainWindow", "Entropy", None))
        self.actionEntropy.setStatusTip(_translate("MainWindow", "Entropy: the Shannon entropy", None))
        self.actionEntropy_S.setText(_translate("MainWindow", "Entropy_S", None))
        self.actionEntropy_S.setStatusTip(_translate("MainWindow", "Entropy_S: a normalized shannon entropy 0...1,  P1=nr of bins  (must be >= 10)", None))
        self.actionComplexity.setText(_translate("MainWindow", "Complexity", None))
        self.actionComplexity.setStatusTip(_translate("MainWindow", "Complexity: uses the mixin to calculate a complexity number,  P1=nr (must be >=10),   P2=distribution", None))
        self.actionMajorization.setText(_translate("MainWindow", "Majorization", None))
        self.actionMajorization.setStatusTip(_translate("MainWindow", "Majorization: P1=grid1,   P2=nr ( >10),   P3=distribution", None))

from matplotlibwidgetFile import matplotlibWidget

if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    MainWindow = QtGui.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

